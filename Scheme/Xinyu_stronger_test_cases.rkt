(expr-compare '(cons a lambda) '(cons a λ))
;    =>       '(cons a (if % lambda λ))
(expr-compare '(lambda (a) a) '(lambda (b) b))
;    =>       '(lambda (a!b) a!b)
(expr-compare '(lambda (a) b) '(cons (c) b))
;    =>       '(if % (lambda (a) b) (cons (c) b))
(expr-compare '((λ (if) (+ if 1)) 3) '((lambda (fi) (+ fi 1)) 3))
;    =>       '((λ (if!fi) (+ if!fi 1)) 3)
(expr-compare '(lambda (lambda) lambda) '(λ (λ) λ))
;    =>       '(λ (lambda!λ) lambda!λ)
(expr-compare ''lambda '(quote λ))
;    =>       '(if % 'lambda 'λ)
(expr-compare '(lambda (a b) a) '(λ (b) b))
;    =>       '(if % (lambda (a b) a) (λ (b) b))
(expr-compare '(λ (a b) (lambda (b) b)) '(lambda (b) (λ (b) b)))
;    =>       '(if % (λ (a b) (lambda (b) b)) (lambda (b) (λ (b) b)))
(expr-compare '(λ (let) (let ((x 1)) x)) '(lambda (let) (let ((y 1)) y)))
;    =>       '(λ (let) (let (((if % x y) 1)) (if % x y)))
(expr-compare '(λ (x) ((λ (x) x) x))
              '(λ (y) ((λ (x) y) x)))
;      ⇒      '(λ (x!y) ((λ (x) (if % x x!y)) (if % x!y x)))
(expr-compare '(((λ (g)
                   ((λ (x) (g (λ () (x x))))     ; This is the way we define a recursive function
                    (λ (x) (g (λ () (x x))))))   ; when we don't have 'letrec'
                 (λ (r)                               ; Here (r) will be the function itself
                   (λ (n) (if (= n 0)
                              1
                              (* n ((r) (- n 1))))))) ; Therefore this thing calculates factorial of n
                10)
              '(((λ (x)
                   ((λ (n) (x (λ () (n n))))
                    (λ (r) (x (λ () (r r))))))
                 (λ (g)
                   (λ (x) (if (= x 0)
                              1
                              (* x ((g) (- x 1)))))))
                9))
;      ⇒      '(((λ (g!x)
;                   ((λ (x!n) (g!x (λ () (x!n x!n))))
;                    (λ (x!r) (g!x (λ () (x!r x!r))))))
;                 (λ (r!g)
;                   (λ (n!x) (if (= n!x 0)
;                                1
;                                (* n!x ((r!g) (- n!x 1)))))))
;                (if % 10 9))
